#!/usr/bin/env python
"""
Script para verificar el estado del sistema de sincronizaci√≥n.
Ejecutar desde la l√≠nea de comandos para obtener un resumen r√°pido.
"""
import os
import sys
import django
import json
import argparse
from datetime import datetime, timedelta

# Configurar entorno Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pronto_shoes.settings')
django.setup()

from django.utils import timezone
from django.db.models import Count, Q
from django.core.cache import cache
from tiendas.models import Tienda
from sincronizacion.models import (
    ColaSincronizacion, ConfiguracionSincronizacion, 
    RegistroSincronizacion, EstadoSincronizacion, TipoOperacion
)
from sincronizacion.cache_manager import detectar_estado_conexion, CACHE_DIR, CACHE_PREFIX
from django.contrib.contenttypes.models import ContentType
from sincronizacion.websocket import notificar_cambio_estado, notificar_conflicto
from sincronizacion.performance_optimizations import (
    refrescar_cache_incremental, ajustar_prioridades_dinamicas
)

def formatear_tiempo(segundos):
    """Formatea un tiempo en segundos a un formato legible"""
    if segundos < 60:
        return f"{int(segundos)} segundos"
    elif segundos < 3600:
        return f"{int(segundos/60)} minutos"
    elif segundos < 86400:
        return f"{int(segundos/3600)} horas"
    else:
        return f"{int(segundos/86400)} d√≠as"

def verificar_sincronizacion():
    """Verifica y muestra el estado del sistema de sincronizaci√≥n"""
    # Estado de conexi√≥n
    try:
        online = detectar_estado_conexion()
        print(f"\nüåê Estado de conexi√≥n: {'‚úÖ ONLINE' if online else '‚ùå OFFLINE'}")
    except:
        print("\nüåê Estado de conexi√≥n: ‚ùì NO DETECTABLE")
    
    # Tiendas activas
    tiendas = Tienda.objects.filter(activa=True).count()
    print(f"\nüè™ Tiendas activas: {tiendas}")
    
    # Operaciones pendientes
    pendientes = ColaSincronizacion.objects.filter(estado=EstadoSincronizacion.PENDIENTE).count()
    print(f"\n‚è≥ Operaciones pendientes: {pendientes}")
    
    # Desglose por tipo de operaci√≥n
    tipos = ColaSincronizacion.objects.filter(
        estado=EstadoSincronizacion.PENDIENTE
    ).values('tipo_operacion').annotate(total=Count('id'))
    
    if tipos:
        print("\nüìä Desglose por tipo:")
        for tipo in tipos:
            print(f"  - {tipo['tipo_operacion']}: {tipo['total']}")
    
    # Conflictos
    conflictos = ColaSincronizacion.objects.filter(tiene_conflicto=True).count()
    print(f"\n‚ö†Ô∏è Conflictos: {conflictos}")
    
    if conflictos > 0:
        print("\nüìã Detalle de conflictos:")
        for conflicto in ColaSincronizacion.objects.filter(tiene_conflicto=True):
            content_type = ContentType.objects.get(id=conflicto.content_type_id)
            print(f"  - {content_type.app_label}.{content_type.model} (ID: {conflicto.object_id})")
    
    # √öltima sincronizaci√≥n
    try:
        ultima = RegistroSincronizacion.objects.filter(
            estado=EstadoSincronizacion.COMPLETADO
        ).order_by('-fecha_fin').first()
        
        if ultima:
            tiempo_desde = (timezone.now() - ultima.fecha_fin).total_seconds()
            print(f"\nüïí √öltima sincronizaci√≥n: hace {formatear_tiempo(tiempo_desde)}")
        else:
            print("\nüïí √öltima sincronizaci√≥n: nunca")
    except:
        print("\nüïí √öltima sincronizaci√≥n: error al obtener")
    
    # Verificar cach√©
    try:
        keys = cache.keys('sync_cache_*')
        print(f"\nüíæ Objetos en cach√©: {len(keys) if keys else 0}")
    except:
        print("\nüíæ Objetos en cach√©: error al obtener")
    
    # Comprobar si hay alguna sincronizaci√≥n en curso
    en_proceso = RegistroSincronizacion.objects.filter(
        estado=EstadoSincronizacion.EN_PROCESO
    ).count()
    
    if en_proceso:
        print(f"\nüîÑ Sincronizaciones en curso: {en_proceso}")
    
    # Estado general
    if pendientes > 100 or conflictos > 0:
        print("\nüö® ESTADO GENERAL: REQUIERE ATENCI√ìN")
    elif not online:
        print("\n‚ö†Ô∏è ESTADO GENERAL: MODO OFFLINE")
    else:
        print("\n‚úÖ ESTADO GENERAL: NORMAL")
    
    print("\n")

def verificar_optimizaciones_rendimiento():
    """Verifica y prueba las optimizaciones de rendimiento"""
    print("\n=============================================")
    print("   PRUEBAS DE OPTIMIZACIONES DE RENDIMIENTO")
    print("=============================================")
    
    # Probar refresco incremental de cach√©
    try:
        print("\nüìä Probando refresco incremental de cach√©...")
        start_time = timezone.now()
        actualizados = refrescar_cache_incremental()
        tiempo = (timezone.now() - start_time).total_seconds()
        print(f"‚úÖ Refresco incremental completado: {actualizados} registros en {tiempo:.2f} segundos")
    except Exception as e:
        print(f"‚ùå Error al probar refresco incremental: {e}")
    
    # Probar ajuste din√°mico de prioridades
    try:
        print("\nüìä Probando ajuste din√°mico de prioridades...")
        start_time = timezone.now()
        resultado = ajustar_prioridades_dinamicas()
        tiempo = (timezone.now() - start_time).total_seconds()
        estado = "‚úÖ Completado" if resultado else "‚ùå No completado"
        print(f"{estado} en {tiempo:.2f} segundos")
    except Exception as e:
        print(f"‚ùå Error al probar ajuste de prioridades: {e}")
    
    # Probar notificaciones WebSocket
    try:
        print("\nüìä Probando notificaciones WebSocket...")
        start_time = timezone.now()
        resultado = notificar_cambio_estado()
        tiempo = (timezone.now() - start_time).total_seconds()
        estado = "‚úÖ Enviado" if resultado else "‚ùå Error"
        print(f"Estado: {estado} en {tiempo:.2f} segundos")
    except Exception as e:
        print(f"‚ùå Error al probar notificaciones: {e}")
    
    print("\n=============================================")


if __name__ == "__main__":
    print("\n=============================================")
    print("   ESTADO DEL SISTEMA DE SINCRONIZACI√ìN")
    print("=============================================")
    
    verificar_sincronizacion()
    
    # Verificar optimizaciones si se pasa el argumento --optimizaciones
    if len(sys.argv) > 1 and sys.argv[1] == '--optimizaciones':
        verificar_optimizaciones_rendimiento()
